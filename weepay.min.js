"use strict"; var Constants = { Locale: { TR: "tr", EN: "en" }, Currency: { TL: "TL", EUR: "EUR", USD: "USD", GBP: "GBP" }, PaymentGroup: { PRODUCT: "PRODUCT", LISTING: "LISTING", SUBSCRIPTION: "SUBSCRIPTION" }, PaymentChannel: { WEB: "WEB", MOBILE: "MOBILE", MOBILE_WEB: "MOBILE_WEB", MOBILE_ANDROID: "MOBILE_ANDROID", MOBILE_WINDOWS: "MOBILE_WINDOWS", MOBILE_TABLET: "MOBILE_TABLET", MOBILE_PHONE: "MOBILE_PHONE" }, ProductType: { PHYSICAL: "PHYSICAL", VIRTUAL: "VIRTUAL" } }; function Auth(e) { this.auth = e } function weepayInit() { this.configure = function (e) { var t = new Auth(e); return this.auth = t }, this.getPayment = function (e, t) { t(new GetPaymentModel(new GetPaymentRequest(e), this.auth).getRawResult()) }, this.formInitialize = function (e, t) { t(new FormInitializeModel(new FormInitializeRequest(e.data, e.customer, e.shippingAddress, e.billingAddress, e.products), this.auth).getRawResult()) }, this.createPayment = function (e, t) { t(new CreatePaymentModel(new CreatePaymentRequest(e.data, e.customer, e.shippingAddress, e.billingAddress, e.products), this.auth).getRawResult()) }, this.createPayment3d = function (e, t) { t(new CreatePaymentThreeDModel(new CreatePaymentRequestThreeD(e.data, e.customer, e.shippingAddress, e.billingAddress, e.products), this.auth).getRawResult()) } } function BaseRequest(e) { this.request = e } function GetPaymentRequest(e) { BaseRequest.call(this, e), this.getJsonObject = function (e) { return { Auth: e.auth, Data: this.request } } } function FormInitializeRequest(e, t, s, n, r) { this.data = e, this.customer = t, this.shippingAddress = s, this.billingAddress = n, this.products = r, this.getJsonObject = function (e) { return { Auth: e.auth, Data: this.data, Products: this.products, Customer: this.customer, ShippingAddress: this.shippingAddress, BillingAddress: this.billingAddress } } } function CreatePaymentRequest(e, t, s, n, r) { this.data = e, this.customer = t, this.shippingAddress = s, this.billingAddress = n, this.products = r, this.getJsonObject = function (e) { return { Auth: e.auth, Data: this.data, Products: this.products, Customer: this.customer, ShippingAddress: this.shippingAddress, BillingAddress: this.billingAddress } } } function CreatePaymentRequestThreeD(e, t, s, n, r) { this.data = e, this.customer = t, this.shippingAddress = s, this.billingAddress = n, this.products = r, this.getJsonObject = function (e) { return { Auth: e.auth, Data: this.data, Products: this.products, Customer: this.customer, ShippingAddress: this.shippingAddress, BillingAddress: this.billingAddress } } } function BaseResource(e) { this.response = e } function GetPaymentResource(e) { BaseResource.call(this, e) } function FormInitializeResource(e) { BaseResource.call(this, e) } function CreatePaymentResource(e) { BaseResource.call(this, e) } function CreatePaymentThreeDResource(e) { BaseResource.call(this, e) } function BaseModel() { } function GetPaymentModel(e, t) { if (this.request = e, this.option = t, t instanceof Auth && e instanceof GetPaymentRequest) return new GetPaymentResource(this.responseHandler(t, e, "/GetPayment/Detail")) } function FormInitializeModel(e, t) { if (this.request = e, this.option = t, t instanceof Auth && e instanceof FormInitializeRequest) return new FormInitializeResource(this.responseHandler(t, e, "/Payment/PaymentCreate")) } function CreatePaymentModel(e, t) { if (this.request = e, this.option = t, t instanceof Auth && e instanceof CreatePaymentRequest) return new CreatePaymentResource(this.responseHandler(t, e, "/Payment/PaymentRequest")) } function CreatePaymentThreeDModel(e, t) { if (this.request = e, this.option = t, t instanceof Auth && e instanceof CreatePaymentRequestThreeD) return new CreatePaymentThreeDResource(this.responseHandler(t, e, "/Payment/PaymentRequestThreeD")) } BaseRequest.prototype.toJsonString = function (e) { return JSON.stringify(this.getJsonObject(e)) }, GetPaymentRequest.prototype = Object.create(BaseRequest.prototype), FormInitializeRequest.prototype = Object.create(BaseRequest.prototype), CreatePaymentRequest.prototype = Object.create(BaseRequest.prototype), CreatePaymentRequestThreeD.prototype = Object.create(BaseRequest.prototype), BaseResource.prototype.getRawResult = function () { return this.response }, GetPaymentResource.prototype = Object.create(BaseResource.prototype), FormInitializeResource.prototype = Object.create(BaseResource.prototype), CreatePaymentResource.prototype = Object.create(BaseResource.prototype), CreatePaymentThreeDResource.prototype = Object.create(BaseResource.prototype), BaseModel.prototype.responseHandler = function (e, t, s) { var n = "", r = e.auth.baseUrl + s, i = new XMLHttpRequest; return i.open("POST", r, !1), i.setRequestHeader("Content-type", "application/x-www-form-urlencoded"), i.onreadystatechange = function () { 4 == i.readyState && (n = JSON.parse(i.responseText)) }, i.send(t.toJsonString(e)), n }, GetPaymentModel.prototype = Object.create(BaseModel.prototype), FormInitializeModel.prototype = Object.create(BaseModel.prototype), CreatePaymentModel.prototype = Object.create(BaseModel.prototype), CreatePaymentThreeDModel.prototype = Object.create(BaseModel.prototype);